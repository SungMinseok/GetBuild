╔════════════════════════════════════════════════════════════╗
║  schedule.json 파일을 Git에서 제거하는 방법                ║
╚════════════════════════════════════════════════════════════╝

📋 현재 상황:
   - schedule.json이 실수로 GitHub에 올라감
   - 로컬 파일은 계속 사용해야 함
   - 앞으로는 Git에 커밋되지 않아야 함

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🚀 빠른 실행 (3가지 방법 중 선택)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

방법 1: Python 스크립트 (권장) ⭐
═══════════════════════════════════
  python remove_schedule_from_git.py

  ✅ 자동으로 모든 단계 수행
  ✅ 로컬 파일 보존 확인
  ✅ 상세한 진행 상황 표시


방법 2: 배치 파일
═══════════════════════════════════
  remove_schedule_from_git.bat

  ✅ 더블클릭으로 실행
  ✅ 단계별 안내


방법 3: 수동 실행 (고급 사용자)
═══════════════════════════════════
  1. git rm --cached schedule.json
  2. git commit -m "Remove schedule.json from Git tracking"
  3. git push

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📝 단계별 설명

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Step 1: Git 캐시에서 제거
─────────────────────────────────
  git rm --cached schedule.json

  → Git 추적 중단 (로컬 파일은 유지)


Step 2: .gitignore 확인
─────────────────────────────────
  .gitignore 파일을 확인하세요
  
  ✅ schedule.json이 이미 포함됨 (11번 줄)


Step 3: 커밋
─────────────────────────────────
  git commit -m "Remove schedule.json from Git tracking"


Step 4: GitHub에 푸시
─────────────────────────────────
  git push


Step 5: 확인
─────────────────────────────────
  # Git 추적 상태 확인 (결과 없어야 함)
  git ls-files | findstr schedule.json

  # 로컬 파일 확인 (존재해야 함)
  dir schedule.json

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⚠️ 중요 사항

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ 로컬 파일은 그대로 유지됩니다
   → schedule.json 파일이 삭제되지 않음

✅ 앱은 정상 작동합니다
   → 스케줄 기능 계속 사용 가능

✅ 앞으로 Git에 커밋되지 않습니다
   → .gitignore에 포함되어 있음

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔍 (선택) Git 히스토리에서도 완전히 제거

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⚠️ 주의: 이 작업은 Git 히스토리를 다시 쓰므로
   협업 중인 저장소에서는 신중하게 사용하세요!

방법 A: git filter-repo (권장)
─────────────────────────────────
  # 1. 설치
  pip install git-filter-repo

  # 2. 실행
  git filter-repo --path schedule.json --invert-paths

  # 3. 푸시
  git push origin --force --all


방법 B: BFG Repo-Cleaner (빠름)
─────────────────────────────────
  # 1. 다운로드: https://rtyley.github.io/bfg-repo-cleaner/
  
  # 2. 실행
  java -jar bfg.jar --delete-files schedule.json
  git reflog expire --expire=now --all
  git gc --prune=now --aggressive

  # 3. 푸시
  git push origin --force --all

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ 체크리스트

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

작업 전:
  [ ] schedule.json 백업 생성
  [ ] Git 상태 확인 (git status)

작업 중:
  [ ] git rm --cached schedule.json 실행
  [ ] .gitignore 확인
  [ ] 커밋 및 푸시

작업 후:
  [ ] git ls-files에서 schedule.json 제거 확인
  [ ] 로컬 파일 존재 확인
  [ ] GitHub에서 파일 제거 확인
  [ ] 앱 정상 작동 확인

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 상세 가이드

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

더 자세한 내용은 다음 문서를 참조하세요:

  📄 GIT_파일제거_가이드.md
     → 완전한 가이드 및 문제 해결

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 추가 보호할 파일

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

다음 파일들도 .gitignore에 포함되어 있습니다:

  ✅ token.json          (GitHub Token)
  ✅ schedule.json       (스케줄 정보)
  ✅ settings.json       (개인 설정)
  ✅ config.json         (빌드 설정)
  ✅ *.csv               (결과 데이터)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🆘 문제가 발생하면

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 로컬 파일이 사라진 경우:
   → Git에서 복원: git checkout HEAD schedule.json
   → 또는 백업에서 복원

2. "pathspec did not match" 오류:
   → 정상입니다. 이미 제거되었습니다.

3. 커밋할 내용이 없다는 오류:
   → 정상입니다. 이미 완료되었습니다.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

작성일: 2025-10-27
버전: 1.0

